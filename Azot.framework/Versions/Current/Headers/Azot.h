//
//  Azot.h
//  Azot
//
//  Created by Thomas Carayol on 16/01/15.
//  Copyright (c) 2015 Appstud. All rights reserved.
//

#import <Foundation/Foundation.h>

@class ASVideoParams;
@class ASFeedbackParam;

@interface Azot : NSObject

#define AZLog(__FORMAT__, ...) azotLogger((@"%s line %d $ " __FORMAT__), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__)

typedef NS_ENUM(int, AZConfidentialityLevel) {
    AZConfidentialityLevelLow = 0,
    AZConfidentialityLevelMedium,
    AZConfidentialityLevelHigh
} NS_AVAILABLE_IOS(7_0);


/**
 *  Get Azot singleton
 */
+ (instancetype) sharedInstance;

/**
 *  Start analysis in the app. Call it in your app delegate.
 *  @param azotAppToken is the token generated by Azot for the developer to track his app
 *  @return void
 */
+ (void)start:(NSString*)azotAppToken;

/**
 *  Start analysis of a page. Call it in your controller viewDidAppear. Tips: Use this function to analyse a "page", understood as what the user can see.
 *  @param pageId is the name you'll give to your page. It is the name we will use to refer to your page in your analysis dashboard.
 *  @return void
 */
+ (void)startPage: (NSString*)pageId;

/**
 *  Stop a page analysis. Call it in your controller viewDidDisapear.
 *  @param pageId must be the name you gave to the page you've opened in viewDidAppear with function trackPage.
 *  @return void
 */
+ (void)stopPage: (NSString*)pageId;

/**
 *  Track events you care about in your app.
 *  @param eventId is the name of the event you want to track, can be static or dynamic.
 *  @return void
 */
+ (void)event: (NSString*)eventId;

/**
 *  Used to show a feedback view from the user.
 *  @return void
 */
+ (void)showFeedbackView;

/**
 *  Used to get feedbacks from the user.
 *  @param message is your user feedback message.
 *  @param category is the category of your feedback
 *  @return void
 */
+ (void)feedback: (NSString*)message forCategory:(NSString*) category;

/**
 *  Allow you to get your logs if a session ends on a crash, just use AZLog instead of NSLog.
 *  @param format string used to define the log format, same usage as NSLog.
 *  @return void
 */
void azotLogger(NSString *format, ...);

/**
 *  ENUM used to define the current confidentiality
 */
@property   BOOL                        status;
@property   BOOL                        autoTracking;
@property   BOOL                        gps;
@property   BOOL                        wifiOnly;
@property   BOOL                        onDebug;
//@property   BOOL                        feedBack;
@property   ASVideoParams*              video;
@property   ASFeedbackParam*            feedbackParams;

@end

@protocol AzotSecure

bool isSecure();

@end
